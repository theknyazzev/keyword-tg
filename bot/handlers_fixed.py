"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è —É–ø—Ä–∞–≤–ª—è—é—â–µ–≥–æ –±–æ—Ç–∞ - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
"""
import logging
import inspect
from datetime import datetime, timedelta
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.exceptions import TelegramBadRequest

from config import get_admin_list, is_admin, is_super_admin, SUPER_ADMIN_ID, get_monitored_channels
from database import JsonDatabase
from .globals import get_monitor_instance

logger = logging.getLogger(__name__)
router = Router()

# –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
MONITORED_CHANNELS = get_monitored_channels()

class AdminStates(StatesGroup):
    waiting_for_keywords = State()
    waiting_for_channel_id = State()
    waiting_for_channel_name = State()
    waiting_for_remove_channel_id = State()
    waiting_for_new_admin_id = State()
    waiting_for_remove_admin_id = State()
    waiting_for_email_data = State()
    waiting_for_email_recipient = State()
    waiting_for_email_subject = State()
    waiting_for_email_body = State()

def admin_only(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    async def wrapper(message: Message, *args, **kwargs):
        if not is_admin(message.from_user.id):
            await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
            return
        
        sig = inspect.signature(func)
        filtered_kwargs = {}
        for param_name in sig.parameters:
            if param_name in kwargs:
                filtered_kwargs[param_name] = kwargs[param_name]
        
        return await func(message, *args, **filtered_kwargs)
    return wrapper

def super_admin_only(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    async def wrapper(message: Message, *args, **kwargs):
        if not is_super_admin(message.from_user.id):
            await message.answer("‚õî –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—é –±–æ—Ç–∞")
            return
        
        sig = inspect.signature(func)
        filtered_kwargs = {}
        for param_name in sig.parameters:
            if param_name in kwargs:
                filtered_kwargs[param_name] = kwargs[param_name]
        
        return await func(message, *args, **filtered_kwargs)
    return wrapper

def format_moscow_time(time_data):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ"""
    if not time_data:
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    
    if isinstance(time_data, dict):
        moscow_time_str = time_data.get('moscow_time')
        if moscow_time_str:
            try:
                moscow_dt = datetime.fromisoformat(moscow_time_str)
                return moscow_dt.strftime("%d.%m.%Y %H:%M:%S MSK")
            except:
                pass
        
        timestamp = time_data.get('timestamp')
        if timestamp:
            try:
                dt = datetime.fromisoformat(timestamp)
                moscow_dt = dt.replace(tzinfo=None) + timedelta(hours=2)
                return moscow_dt.strftime("%d.%m.%Y %H:%M:%S MSK")
            except:
                pass
    
    if isinstance(time_data, str):
        try:
            dt = datetime.fromisoformat(time_data)
            moscow_dt = dt.replace(tzinfo=None) + timedelta(hours=2)
            return moscow_dt.strftime("%d.%m.%Y %H:%M:%S MSK")
        except:
            return time_data
    
    return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

def format_sender_info(msg_data):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ"""
    sender_full_name = msg_data.get('sender_full_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')
    sender_username = msg_data.get('sender_username', '')
    
    if sender_username and sender_username != sender_full_name:
        return f"{sender_full_name} ({sender_username})"
    return sender_full_name

def get_main_menu(user_id: int = None):
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–∑ 3 –∫–Ω–æ–ø–æ–∫"""
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton(text="üì∫ –ö–∞–Ω–∞–ª—ã"),
                KeyboardButton(text="üìß –ü–æ—á—Ç–∞"),
                KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
            ],
            [
                KeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å")
            ]
        ],
        resize_keyboard=True,
        one_time_keyboard=False,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª..."
    )
    return keyboard

def get_channels_menu(user_id: int = None):
    """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é —Ä–∞–∑–¥–µ–ª–∞ –∫–∞–Ω–∞–ª–æ–≤"""
    keyboard_rows = []
    
    keyboard_rows.append([
        KeyboardButton(text="üìä –°—Ç–∞—Ç—É—Å –∫–∞–Ω–∞–ª–æ–≤"),
        KeyboardButton(text="üîç –ü–æ–∏—Å–∫ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö")
    ])
    
    keyboard_rows.append([
        KeyboardButton(text="üìù –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞"),
        KeyboardButton(text="üì® –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
    ])
    
    keyboard_rows.append([
        KeyboardButton(text="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–Ω–∞–ª–æ–≤"),
        KeyboardButton(text="üì∫ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏")
    ])
    
    if user_id and is_admin(user_id):
        keyboard_rows.append([
            KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª"),
            KeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª")
        ])
    
    keyboard_rows.append([
        KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    ])
    
    keyboard = ReplyKeyboardMarkup(
        keyboard=keyboard_rows,
        resize_keyboard=True,
        one_time_keyboard=False
    )
    return keyboard

def get_email_menu(user_id: int = None):
    """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é —Ä–∞–∑–¥–µ–ª–∞ –ø–æ—á—Ç—ã"""
    keyboard_rows = []
    
    keyboard_rows.append([
        KeyboardButton(text="üìä –°—Ç–∞—Ç—É—Å –ø–æ—á—Ç—ã"),
        KeyboardButton(text="üîç –ü–æ–∏—Å–∫ –≤ –ø–∏—Å—å–º–∞—Ö")
    ])
    
    keyboard_rows.append([
        KeyboardButton(text="üì¨ –í—Ö–æ–¥—è—â–∏–µ –ø–∏—Å—å–º–∞"),
        KeyboardButton(text="üì© –ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ")
    ])
    
    keyboard_rows.append([
        KeyboardButton(text="‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏—Å—å–º–æ"),
        KeyboardButton(text="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—á—Ç—ã")
    ])
    
    keyboard_rows.append([
        KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    ])
    
    keyboard = ReplyKeyboardMarkup(
        keyboard=keyboard_rows,
        resize_keyboard=True,
        one_time_keyboard=False
    )
    return keyboard

def get_settings_menu(user_id: int = None):
    """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    keyboard_rows = []
    
    keyboard_rows.append([
        KeyboardButton(text="üìù –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞"),
        KeyboardButton(text="üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã")
    ])
    
    if user_id and is_admin(user_id):
        keyboard_rows.append([
            KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª"),
            KeyboardButton(text="üßπ –û—á–∏—Å—Ç–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è")
        ])
    
    if user_id and is_super_admin(user_id):
        keyboard_rows.append([
            KeyboardButton(text="üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏")
        ])
    
    keyboard_rows.append([
        KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    ])
    
    keyboard = ReplyKeyboardMarkup(
        keyboard=keyboard_rows,
        resize_keyboard=True,
        one_time_keyboard=False
    )
    return keyboard

def get_back_menu():
    """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞"""
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )
    return keyboard

async def safe_edit_message(callback: CallbackQuery, text: str, reply_markup=None, parse_mode="HTML"):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        if reply_markup is not None:
            await callback.message.edit_text(text, reply_markup=reply_markup, parse_mode=parse_mode)
        else:
            await callback.message.edit_text(text, parse_mode=parse_mode)
        await callback.answer()
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            await callback.answer("‚úÖ –î–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã!")
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏")
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

def get_monitor_from_context():
    """–ü–æ–ª—É—á–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
    return get_monitor_instance()

# ============ –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ ============

@router.message(Command("start"))
@admin_only
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    db = JsonDatabase()
    current_mode = db.get_bot_mode()
    
    inline_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="menu_refresh"),
            InlineKeyboardButton(text="üìä –°—Ç–∞—Ç—É—Å", callback_data="menu_status")
        ]
    ])
    
    mode_icon = "üì∫" if current_mode == 'channels' else "üìß"
    mode_name = "–∫–∞–Ω–∞–ª–æ–≤" if current_mode == 'channels' else "–ø–æ—á—Ç—ã"
    
    text = (
        "üéØ <b>Stalker Bot</b> - –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞\n\n"
        f"{mode_icon} <b>–¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º:</b> {mode_name}\n\n"
        "üöÄ <b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞:</b>\n"
        "‚Ä¢ üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏\n"
        "‚Ä¢ üéØ –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º\n"
        "‚Ä¢ üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤\n"
        "‚Ä¢ üîî –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n"
        "‚Ä¢ üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n"
        "üëá <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é:</b>"
    )
    
    await message.answer(
        text, 
        reply_markup=get_main_menu(message.from_user.id), 
        parse_mode="HTML"
    )
    await message.answer(
        "‚ö° <i>–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:</i>",
        reply_markup=inline_keyboard,
        parse_mode="HTML"
    )

# ============ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–ù–û–ü–û–ö ============

@router.message(F.text == "üì∫ –ö–∞–Ω–∞–ª—ã")
@admin_only
async def menu_channels_section_button(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Ä–∞–∑–¥–µ–ª–∞ –ö–∞–Ω–∞–ª—ã"""
    await message.answer(
        "üì∫ <b>–†–∞–∑–¥–µ–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞–º–∏</b>\n\n"
        "üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Telegram –∫–∞–Ω–∞–ª–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏\n"
        "üéØ –ü–æ–∏—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º\n\n"
        "üëá –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode="HTML",
        reply_markup=get_channels_menu(message.from_user.id)
    )

@router.message(F.text == "üìß –ü–æ—á—Ç–∞")
@admin_only
async def menu_email_section_button(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Ä–∞–∑–¥–µ–ª–∞ –ü–æ—á—Ç–∞"""
    await message.answer(
        "üìß <b>–†–∞–∑–¥–µ–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—á—Ç–æ–π</b>\n\n"
        "üì¨ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Gmail –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏\n"
        "üîç –ü–æ–∏—Å–∫ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö –ø–∏—Å–µ–º\n\n"
        "üëá –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode="HTML",
        reply_markup=get_email_menu(message.from_user.id)
    )

@router.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
@admin_only
async def menu_settings_section_button(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Ä–∞–∑–¥–µ–ª–∞ –ù–∞—Å—Ç—Ä–æ–π–∫–∏"""
    await message.answer(
        "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã</b>\n\n"
        "üéõÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫:",
        parse_mode="HTML",
        reply_markup=get_settings_menu(message.from_user.id)
    )

@router.message(F.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
@admin_only
async def menu_help_button(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ü–æ–º–æ—â—å"""
    await show_help(message)

@router.message(F.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
@admin_only
async def menu_home_button(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await cmd_start(message)

# ============ –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–ù–û–ü–û–ö –ö–ê–ù–ê–õ–û–í ============

@router.message(F.text == "üìä –°—Ç–∞—Ç—É—Å –∫–∞–Ω–∞–ª–æ–≤")
@admin_only
async def menu_channels_status_button(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –°—Ç–∞—Ç—É—Å –∫–∞–Ω–∞–ª–æ–≤"""
    await show_channels_status(message)

@router.message(F.text == "üîç –ü–æ–∏—Å–∫ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö")
@admin_only
async def menu_search_messages_button(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ü–æ–∏—Å–∫ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö"""
    await message.answer(
        "üîç <b>–ü–æ–∏—Å–∫ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –∫–∞–Ω–∞–ª–æ–≤</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö:",
        parse_mode="HTML",
        reply_markup=get_back_menu()
    )

@router.message(F.text == "üìù –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞")
@admin_only
async def menu_keywords_button(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞"""
    await show_keywords(message)

@router.message(F.text == "üì® –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
@admin_only
async def menu_found_messages_button(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    await show_recent_messages(message, 10)

@router.message(F.text == "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–Ω–∞–ª–æ–≤")
@admin_only
async def menu_channels_stats_button(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–Ω–∞–ª–æ–≤"""
    await show_channels_stats(message)

@router.message(F.text == "üì∫ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏")
@admin_only
async def menu_channel_management_button(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞–º–∏"""
    await show_channels(message)

# ============ –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–ù–û–ü–û–ö –ü–û–ß–¢–´ ============

@router.message(F.text == "üìä –°—Ç–∞—Ç—É—Å –ø–æ—á—Ç—ã")
@admin_only
async def menu_email_status_button(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –°—Ç–∞—Ç—É—Å –ø–æ—á—Ç—ã"""
    await show_email_status(message)

@router.message(F.text == "üì¨ –í—Ö–æ–¥—è—â–∏–µ –ø–∏—Å—å–º–∞")
@admin_only
async def menu_inbox_button(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –í—Ö–æ–¥—è—â–∏–µ –ø–∏—Å—å–º–∞"""
    await show_inbox_emails(message)

@router.message(F.text == "üì© –ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ")
@admin_only
async def menu_unread_emails_button(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –ø–∏—Å—å–º–∞"""
    await show_unread_emails(message)

@router.message(F.text == "‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏—Å—å–º–æ")
@admin_only
async def menu_send_email_button(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏—Å—å–º–æ"""
    await send_email_start(message, state)

@router.message(F.text == "üîç –ü–æ–∏—Å–∫ –≤ –ø–∏—Å—å–º–∞—Ö")
@admin_only
async def menu_email_search_button(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ü–æ–∏—Å–∫ –≤ –ø–∏—Å—å–º–∞—Ö"""
    await message.answer(
        "üîç <b>–ü–æ–∏—Å–∫ –≤ –ø–∏—Å—å–º–∞—Ö</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –ø–∏—Å—å–º–∞—Ö:",
        parse_mode="HTML",
        reply_markup=get_back_menu()
    )

@router.message(F.text == "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—á—Ç—ã")
@admin_only
async def menu_email_stats_button(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—á—Ç—ã"""
    await show_email_stats(message)

# ============ –§–£–ù–ö–¶–ò–ò –ü–†–û–°–ú–û–¢–†–ê –î–ê–ù–ù–´–• ============

async def show_channels_status(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∫–∞–Ω–∞–ª–æ–≤"""
    monitor = get_monitor_from_context()
    db = JsonDatabase()
    settings = db.load_settings()
    channels = db.get_channels()
    
    monitoring_status = "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" if settings.get("monitoring_enabled", False) else "üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
    channels_count = len(channels)
    keywords_count = len(settings.get("keywords", []))
    total_messages = len(db.load_found_messages())
    
    text = (
        f"üìä <b>–°—Ç–∞—Ç—É—Å –∫–∞–Ω–∞–ª–æ–≤</b>\n"
        f"{'‚ïê' * 30}\n\n"
        f"üî∏ <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:</b> {monitoring_status}\n"
        f"üî∏ <b>–ö–∞–Ω–∞–ª–æ–≤:</b> {channels_count}\n"
        f"üî∏ <b>–ö–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤:</b> {keywords_count}\n"
        f"üî∏ <b>–ù–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π:</b> {total_messages}\n\n"
    )
    
    if channels:
        text += "üì∫ <b>–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –∫–∞–Ω–∞–ª—ã:</b>\n\n"
        for str_channel_id, channel_name in channels.items():
            channel_id = int(str_channel_id)
            messages_from_channel = len(db.get_messages_by_channel(channel_id))
            text += f"üìå <b>{channel_name}</b> ‚Äî {messages_from_channel} —Å–æ–æ–±—â–µ–Ω–∏–π\n"
    else:
        text += "‚ùå <i>–ö–∞–Ω–∞–ª—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã</i>\n"
    
    text += f"\n{'‚ïê' * 30}"
    
    await message.answer(text, parse_mode="HTML", reply_markup=get_back_menu())

async def show_keywords(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞"""
    db = JsonDatabase()
    settings = db.load_settings()
    current_keywords = settings.get("keywords", [])
    
    text = (
        f"üîë <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏</b>\n\n"
        f"<b>–¢–µ–∫—É—â–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:</b>\n"
        f"{'‚Ä¢ ' + chr(10).join(current_keywords) if current_keywords else '–ù–µ—Ç –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤'}\n\n"
        f"üìà –í—Å–µ–≥–æ: <b>{len(current_keywords)}</b> —Å–ª–æ–≤(–∞)\n\n"
        f"üí° <i>–ü–æ–∏—Å–∫ –≤–µ–¥–µ—Ç—Å—è –±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞</i>\n\n"
        f"–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:"
    )
    
    await message.answer(text, parse_mode="HTML", reply_markup=get_back_menu())

async def show_recent_messages(message: Message, limit: int):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    db = JsonDatabase()
    recent_messages = db.get_recent_messages(limit)
    
    if not recent_messages:
        text = f"üì≠ <b>–ù–µ—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π</b>\n\n–°–æ–æ–±—â–µ–Ω–∏—è –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å –ø–æ—Å–ª–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º."
    else:
        text = f"üì® <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ {len(recent_messages)} –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:</b>\n\n"
        
        for i, msg in enumerate(recent_messages, 1):
            channel_name = msg.get('channel_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª')
            keywords = ', '.join(msg.get('found_keywords', []))
            message_text = msg.get('text', '')[:150] + '...' if len(msg.get('text', '')) > 150 else msg.get('text', '')
            
            moscow_time = format_moscow_time(msg)
            sender_info = format_sender_info(msg)
            
            text += (
                f"<b>{i}. {channel_name}</b>\n"
                f"üë§ {sender_info}\n"
                f"üîë <i>{keywords}</i>\n"
                f"üìÖ {moscow_time}\n"
                f"üí¨ {message_text}\n"
                f"{'‚îÄ' * 25}\n\n"
            )
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if len(text) > 4096:
        parts = [text[i:i+4000] for i in range(0, len(text), 4000)]
        for part in parts:
            await message.answer(part, parse_mode="HTML")
    else:
        await message.answer(text, parse_mode="HTML")
    
    await message.answer("üí° <i>–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é:</i>", reply_markup=get_back_menu(), parse_mode="HTML")

async def show_channels_stats(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–Ω–∞–ª–æ–≤"""
    db = JsonDatabase()
    all_messages = db.load_found_messages()
    
    if not all_messages:
        await message.answer(
            "üì≠ <b>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏</b>\n\n"
            "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—è–≤–∏—Ç—Å—è –ø–æ—Å–ª–µ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π.",
            parse_mode="HTML",
            reply_markup=get_back_menu()
        )
        return
    
    channel_stats = {}
    keyword_stats = {}
    
    for msg in all_messages:
        channel_name = msg.get('channel_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª')
        channel_stats[channel_name] = channel_stats.get(channel_name, 0) + 1
        
        keywords = msg.get('found_keywords', [])
        for kw in keywords:
            keyword_stats[kw] = keyword_stats.get(kw, 0) + 1
    
    text = "üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–Ω–∞–ª–æ–≤</b>\n\n"
    
    total_messages = sum(channel_stats.values())
    text += f"üìä –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: <b>{total_messages}</b>\n\n"
    
    text += "üì∫ <b>–ü–æ –∫–∞–Ω–∞–ª–∞–º:</b>\n"
    for channel, count in sorted(channel_stats.items(), key=lambda x: x[1], reverse=True):
        percentage = (count / total_messages) * 100 if total_messages > 0 else 0
        text += f"üî∏ <b>{channel}</b>: {count} ({percentage:.1f}%)\n"
    
    text += "\nüîë <b>–ü–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º:</b>\n"
    for keyword, count in sorted(keyword_stats.items(), key=lambda x: x[1], reverse=True)[:10]:
        text += f"‚Ä¢ <b>{keyword}</b>: {count} —É–ø–æ–º–∏–Ω–∞–Ω–∏–π\n"
    
    await message.answer(text, parse_mode="HTML", reply_markup=get_back_menu())

async def show_channels(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞–Ω–∞–ª—ã"""
    db = JsonDatabase()
    channels = db.get_channels()
    
    text = "üì∫ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏</b>\n\n"
    
    if channels:
        text += "üìã <b>–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –∫–∞–Ω–∞–ª—ã:</b>\n\n"
        for str_channel_id, channel_name in channels.items():
            channel_id = int(str_channel_id)
            messages_count = len(db.get_messages_by_channel(channel_id))
            text += f"üî∏ <b>{channel_name}</b>\n"
            text += f"   ID: <code>{channel_id}</code>\n"
            text += f"   –ù–∞–π–¥–µ–Ω–æ: {messages_count} —Å–æ–æ–±—â–µ–Ω–∏–π\n\n"
        
        text += f"üìä –í—Å–µ–≥–æ –∫–∞–Ω–∞–ª–æ–≤: <b>{len(channels)}</b>"
    else:
        text += "üì≠ <b>–ù–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤</b>\n\n"
        text += "–î–æ–±–∞–≤—å—Ç–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è –Ω–∞—á–∞–ª–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞."
    
    await message.answer(text, parse_mode="HTML", reply_markup=get_back_menu())

# ============ –§–£–ù–ö–¶–ò–ò –†–ê–ë–û–¢–´ –° –ü–û–ß–¢–û–ô ============

async def show_email_status(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ—á—Ç—ã"""
    try:
        from gmail_module import get_gmail_monitor
        gmail_monitor = get_gmail_monitor()
        
        if not gmail_monitor:
            await message.answer(
                "‚ùå <b>Gmail –º–æ–Ω–∏—Ç–æ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</b>\n\n"
                "–ú–æ–¥—É–ª—å Gmail –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.",
                parse_mode="HTML",
                reply_markup=get_back_menu()
            )
            return
        
        stats = gmail_monitor.get_stats()
        
        status = "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" if stats.get('running', False) else "üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
        auth_status = "‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω" if stats.get('authenticated', False) else "‚ùå –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω"
        
        text = (
            f"üìä <b>–°—Ç–∞—Ç—É—Å –ø–æ—á—Ç–æ–≤–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞</b>\n"
            f"{'‚ïê' * 30}\n\n"
            f"üìß <b>–°—Ç–∞—Ç—É—Å:</b> {status}\n"
            f"üîê <b>–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è:</b> {auth_status}\n"
            f"‚è±Ô∏è <b>–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏:</b> {stats.get('check_interval', 60)} —Å–µ–∫\n"
            f"üïí <b>–ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞:</b> {stats.get('last_check', '–ù–∏–∫–æ–≥–¥–∞')[:16] if stats.get('last_check') else '–ù–∏–∫–æ–≥–¥–∞'}\n\n"
            f"üì¨ <b>–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–∏—Å–µ–º:</b> {stats.get('processed_emails_count', 0)}\n\n"
            f"{'‚ïê' * 30}"
        )
        
        await message.answer(text, parse_mode="HTML", reply_markup=get_back_menu())
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ—á—Ç—ã: {e}")
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞</b>\n\n"
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ—á—Ç–æ–≤–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.",
            parse_mode="HTML",
            reply_markup=get_back_menu()
        )

async def show_inbox_emails(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Ö–æ–¥—è—â–∏–µ –ø–∏—Å—å–º–∞"""
    try:
        from gmail_module import get_gmail_monitor
        gmail_monitor = get_gmail_monitor()
        
        if not gmail_monitor:
            await message.answer(
                "‚ùå <b>Gmail –º–æ–Ω–∏—Ç–æ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</b>\n\n"
                "–ú–æ–¥—É–ª—å Gmail –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.",
                parse_mode="HTML",
                reply_markup=get_back_menu()
            )
            return
        
        emails = gmail_monitor.get_recent_emails(limit=10)
        
        if not emails:
            await message.answer(
                "üì≠ <b>–ù–µ—Ç –≤—Ö–æ–¥—è—â–∏—Ö –ø–∏—Å–µ–º</b>\n\n"
                "–í –ø–∞–ø–∫–µ –≤—Ö–æ–¥—è—â–∏—Ö –ø–æ–∫–∞ –Ω–µ—Ç –ø–∏—Å–µ–º.",
                parse_mode="HTML",
                reply_markup=get_back_menu()
            )
            return
        
        text = f"üì¨ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ {len(emails)} –≤—Ö–æ–¥—è—â–∏—Ö –ø–∏—Å–µ–º:</b>\n\n"
        
        for i, email in enumerate(emails, 1):
            sender = email.get('sender', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')
            subject = email.get('subject', '–ë–µ–∑ —Ç–µ–º—ã')
            date = email.get('date', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            snippet = email.get('snippet', '')[:100] + '...' if len(email.get('snippet', '')) > 100 else email.get('snippet', '')
            
            text += (
                f"<b>{i}. {subject}</b>\n"
                f"üë§ –û—Ç: {sender}\n"
                f"üìÖ {date}\n"
                f"üí¨ {snippet}\n"
                f"{'‚îÄ' * 25}\n\n"
            )
        
        await message.answer(text, parse_mode="HTML", reply_markup=get_back_menu())
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Ö–æ–¥—è—â–∏—Ö –ø–∏—Å–µ–º: {e}")
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∏—Å–µ–º</b>\n\n"
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Ö–æ–¥—è—â–∏—Ö –ø–∏—Å–µ–º.",
            parse_mode="HTML",
            reply_markup=get_back_menu()
        )

async def show_unread_emails(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –ø–∏—Å—å–º–∞"""
    try:
        from gmail_module import get_gmail_monitor
        gmail_monitor = get_gmail_monitor()
        
        if not gmail_monitor:
            await message.answer(
                "‚ùå <b>Gmail –º–æ–Ω–∏—Ç–æ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</b>\n\n"
                "–ú–æ–¥—É–ª—å Gmail –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.",
                parse_mode="HTML",
                reply_markup=get_back_menu()
            )
            return
        
        unread_emails = gmail_monitor.get_unread_emails()
        
        if not unread_emails:
            await message.answer(
                "‚úÖ <b>–ù–µ—Ç –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –ø–∏—Å–µ–º</b>\n\n"
                "–í—Å–µ –ø–∏—Å—å–º–∞ –ø—Ä–æ—á–∏—Ç–∞–Ω—ã!",
                parse_mode="HTML",
                reply_markup=get_back_menu()
            )
            return
        
        text = f"üì© <b>–ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –ø–∏—Å–µ–º: {len(unread_emails)}</b>\n\n"
        
        for i, email in enumerate(unread_emails[:10], 1):
            sender = email.get('sender', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')
            subject = email.get('subject', '–ë–µ–∑ —Ç–µ–º—ã')
            date = email.get('date', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            snippet = email.get('snippet', '')[:100] + '...' if len(email.get('snippet', '')) > 100 else email.get('snippet', '')
            
            text += (
                f"<b>üìß {i}. {subject}</b>\n"
                f"üë§ –û—Ç: {sender}\n"
                f"üìÖ {date}\n"
                f"üí¨ {snippet}\n"
                f"{'‚îÄ' * 25}\n\n"
            )
        
        if len(unread_emails) > 10:
            text += f"... –∏ –µ—â–µ {len(unread_emails) - 10} –ø–∏—Å–µ–º"
        
        await message.answer(text, parse_mode="HTML", reply_markup=get_back_menu())
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –ø–∏—Å–µ–º: {e}")
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∏—Å–µ–º</b>\n\n"
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –ø–∏—Å–µ–º.",
            parse_mode="HTML",
            reply_markup=get_back_menu()
        )

async def show_email_stats(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—á—Ç—ã"""
    try:
        from gmail_module import get_gmail_monitor
        gmail_monitor = get_gmail_monitor()
        
        if not gmail_monitor:
            await message.answer(
                "‚ùå <b>Gmail –º–æ–Ω–∏—Ç–æ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</b>\n\n"
                "–ú–æ–¥—É–ª—å Gmail –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.",
                parse_mode="HTML",
                reply_markup=get_back_menu()
            )
            return
        
        stats = gmail_monitor.get_detailed_stats()
        
        text = (
            f"üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—á—Ç—ã</b>\n"
            f"{'‚ïê' * 30}\n\n"
            f"üìä <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            f"üì¨ –í—Å–µ–≥–æ –ø–∏—Å–µ–º: {stats.get('total_emails', 0)}\n"
            f"üì© –ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö: {stats.get('unread_count', 0)}\n"
            f"‚úÖ –ü—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö: {stats.get('read_count', 0)}\n\n"
            f"üìÖ <b>–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞:</b>\n"
            f"üì® –ü–æ–ª—É—á–µ–Ω–æ: {stats.get('today_received', 0)}\n\n"
            f"üéØ <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:</b>\n"
            f"‚è±Ô∏è –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {stats.get('uptime', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n\n"
            f"{'‚ïê' * 30}"
        )
        
        await message.answer(text, parse_mode="HTML", reply_markup=get_back_menu())
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ—á—Ç—ã: {e}")
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏</b>\n\n"
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—á—Ç—ã.",
            parse_mode="HTML",
            reply_markup=get_back_menu()
        )

async def send_email_start(message: Message, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞"""
    text = (
        "‚úâÔ∏è <b>–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å—å–º–∞</b>\n\n"
        "üìù –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è:\n\n"
        "üí° <b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
        "‚Ä¢ user@example.com\n"
        "‚Ä¢ test.email@gmail.com\n\n"
        "‚ùå –î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel"
    )
    
    await state.set_state(AdminStates.waiting_for_email_recipient)
    await message.answer(text, parse_mode="HTML", reply_markup=get_back_menu())

async def show_help(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"""
    text = (
        "üìñ <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ Stalker Bot</b>\n\n"
        "ü§ñ <b>–ß—Ç–æ –¥–µ–ª–∞–µ—Ç –±–æ—Ç:</b>\n"
        "‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç Telegram –∫–∞–Ω–∞–ª—ã\n"
        "‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç Gmail –ø–æ—á—Ç—É\n"
        "‚Ä¢ –ò—â–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏\n"
        "‚Ä¢ –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—Ö–æ–¥–∫–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö\n"
        "‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏\n\n"
        "üì∫ <b>–†–∞–∑–¥–µ–ª –∫–∞–Ω–∞–ª–æ–≤:</b>\n"
        "‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤\n"
        "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π\n"
        "‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞–Ω–∞–ª–∞–º\n\n"
        "üìß <b>–†–∞–∑–¥–µ–ª –ø–æ—á—Ç—ã:</b>\n"
        "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Ö–æ–¥—è—â–∏—Ö –ø–∏—Å–µ–º\n"
        "‚Ä¢ –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å–µ–º\n"
        "‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—á—Ç—ã\n\n"
        "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n"
        "‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏\n"
        "‚Ä¢ –û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö\n"
        "‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏\n\n"
        "üí° <b>–°–æ–≤–µ—Ç:</b> –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏!"
    )
    
    await message.answer(text, parse_mode="HTML", reply_markup=get_back_menu())
