"""
–û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª—è—é—â–µ–≥–æ –±–æ—Ç–∞
"""

import asyncio
import logging
from aiogram import Bot, Dispatcher
from aiogram.fsm.storage.memory import MemoryStorage

from config import BOT_TOKEN
from .handlers import router
from .globals import set_monitor_instance, get_monitor_instance


logger = logging.getLogger(__name__)


class ControlBot:
    """–ö–ª–∞—Å—Å —É–ø—Ä–∞–≤–ª—è—é—â–µ–≥–æ –±–æ—Ç–∞ –Ω–∞ aiogram"""
    
    def __init__(self, monitor=None):
        self.bot = Bot(token=BOT_TOKEN)
        self.storage = MemoryStorage()
        self.dp = Dispatcher(storage=self.storage)
        self.monitor = monitor
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–æ–Ω–∏—Ç–æ—Ä–∞
        set_monitor_instance(monitor)
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä
        self.dp.include_router(router)
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("–ó–∞–ø—É—Å–∫ —É–ø—Ä–∞–≤–ª—è—é—â–µ–≥–æ –±–æ—Ç–∞...")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º callback –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∞
        if self.monitor:
            self.monitor.set_message_callback(self._handle_found_message)
        
        await self.dp.start_polling(self.bot)
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —É–ø—Ä–∞–≤–ª—è—é—â–µ–≥–æ –±–æ—Ç–∞...")
        await self.bot.session.close()
    
    async def _handle_found_message(self, message_data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            from config import get_admin_list
            from datetime import datetime
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
            channel_name = message_data.get('channel_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª')
            keywords = ', '.join(message_data.get('found_keywords', []))
            message_text = message_data.get('text', '')
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            sender_full_name = message_data.get('sender_full_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')
            sender_username = message_data.get('sender_username', '')
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ
            sender_info = sender_full_name
            if sender_username and sender_username != sender_full_name:
                sender_info = f"{sender_full_name} ({sender_username})"
            
            # –ü–æ–ª—É—á–∞–µ–º –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
            moscow_time_str = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            if message_data.get('moscow_time'):
                try:
                    moscow_dt = datetime.fromisoformat(message_data['moscow_time'])
                    moscow_time_str = moscow_dt.strftime("%d.%m.%Y %H:%M:%S MSK")
                except:
                    moscow_time_str = message_data.get('moscow_time', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            
            # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if len(message_text) > 500:
                message_text = message_text[:500] + '...'
            
            notification_text = (
                f"üéØ <b>–ù–∞–π–¥–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!</b>\n\n"
                f"üì∫ <b>–ö–∞–Ω–∞–ª:</b> {channel_name}\n"
                f"ÔøΩ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {sender_info}\n"
                f"ÔøΩüîë <b>–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:</b> <i>{keywords}</i>\n"
                f"üìÖ <b>–í—Ä–µ–º—è:</b> {moscow_time_str}\n\n"
                f"üí¨ <b>–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:</b>\n{message_text}"
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º
            admin_list = get_admin_list()
            for admin_id in admin_list:
                try:
                    await self.bot.send_message(
                        chat_id=admin_id,
                        text=notification_text,
                        parse_mode="HTML"
                    )
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id}: {e}")
            
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã {len(admin_list)} –∞–¥–º–∏–Ω–∞–º –æ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –∏–∑ {channel_name}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
    
    async def send_notification(self, text: str, chat_id: int = None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        if chat_id is None:
            from config import get_admin_list
            admin_list = get_admin_list()
            for admin_id in admin_list:
                try:
                    await self.bot.send_message(chat_id=admin_id, text=text, parse_mode="HTML")
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id}: {e}")
        else:
            try:
                await self.bot.send_message(chat_id=chat_id, text=text, parse_mode="HTML")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
    
    async def send_notification_with_data(self, title: str, content: str, data: dict = None):
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ (–¥–ª—è Gmail –∏ –¥—Ä—É–≥–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤)
        
        Args:
            title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            content: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            data: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        """
        try:
            notification_text = f"{title}\n\n{content}"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º
            from config import get_admin_list
            admin_list = get_admin_list()
            for admin_id in admin_list:
                try:
                    await self.bot.send_message(
                        chat_id=admin_id,
                        text=notification_text,
                        parse_mode="HTML"
                    )
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id}: {e}")
            
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã {len(admin_list)} –∞–¥–º–∏–Ω–∞–º: {title}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏: {e}")
