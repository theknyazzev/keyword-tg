"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è —É–ø—Ä–∞–≤–ª—è—é—â–µ–≥–æ –±–æ—Ç–∞
"""

import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from config import ADMIN_ID, MONITORED_CHANNELS
from database import JsonDatabase
from .globals import get_monitor_instance


logger = logging.getLogger(__name__)
router = Router()


def get_monitor_from_context():
    """–ü–æ–ª—É—á–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
    return get_monitor_instance()


class AdminStates(StatesGroup):
    waiting_for_keywords = State()


def admin_only(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    async def wrapper(message: Message, *args, **kwargs):
        if message.from_user.id != ADMIN_ID:
            await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
            return
        return await func(message, *args, **kwargs)
    return wrapper


# ============ –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ ============

@router.message(Command("start"))
@admin_only
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üìä –°—Ç–∞—Ç—É—Å", callback_data="menu_status"),
            InlineKeyboardButton(text="üìù –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞", callback_data="menu_keywords")
        ],
        [
            InlineKeyboardButton(text="üì∫ –ö–∞–Ω–∞–ª—ã", callback_data="menu_channels"),
            InlineKeyboardButton(text="üì® –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è", callback_data="menu_recent")
        ],
        [
            InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="menu_settings"),
            InlineKeyboardButton(text="üßπ –û—á–∏—Å—Ç–∏—Ç—å –±–∞–∑—É", callback_data="menu_clear")
        ],
        [
            InlineKeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="menu_help"),
            InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å –º–µ–Ω—é", callback_data="menu_refresh")
        ]
    ])
    
    text = (
        "ü§ñ <b>Stalker Bot - –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è</b>\n\n"
        "üéØ <b>–ß—Ç–æ —É–º–µ–µ—Ç –±–æ—Ç:</b>\n"
        "‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç 6 –∫–∞–Ω–∞–ª–æ–≤ –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏\n"
        "‚Ä¢ –ò—â–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏\n"
        "‚Ä¢ –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–∞–∑—É\n"
        "‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –Ω–∞—Ö–æ–¥–∫–∞—Ö\n\n"
        "üëá <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>"
    )
    await message.answer(text, reply_markup=keyboard, parse_mode="HTML")


@router.callback_query(F.data == "menu_refresh")
async def callback_menu_refresh(callback: CallbackQuery):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üìä –°—Ç–∞—Ç—É—Å", callback_data="menu_status"),
            InlineKeyboardButton(text="üìù –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞", callback_data="menu_keywords")
        ],
        [
            InlineKeyboardButton(text="üì∫ –ö–∞–Ω–∞–ª—ã", callback_data="menu_channels"),
            InlineKeyboardButton(text="üì® –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è", callback_data="menu_recent")
        ],
        [
            InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="menu_settings"),
            InlineKeyboardButton(text="üßπ –û—á–∏—Å—Ç–∏—Ç—å –±–∞–∑—É", callback_data="menu_clear")
        ],
        [
            InlineKeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="menu_help"),
            InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å –º–µ–Ω—é", callback_data="menu_refresh")
        ]
    ])
    
    text = (
        "ü§ñ <b>Stalker Bot - –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è</b>\n\n"
        "üéØ <b>–ß—Ç–æ —É–º–µ–µ—Ç –±–æ—Ç:</b>\n"
        "‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç 6 –∫–∞–Ω–∞–ª–æ–≤ –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏\n"
        "‚Ä¢ –ò—â–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏\n"
        "‚Ä¢ –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–∞–∑—É\n"
        "‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –Ω–∞—Ö–æ–¥–∫–∞—Ö\n\n"
        "üëá <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>"
    )
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer("–ú–µ–Ω—é –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")


# ============ –°–¢–ê–¢–£–° ============

@router.message(Command("status"))
@admin_only
async def cmd_status(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /status"""
    await show_status(message)


@router.callback_query(F.data == "menu_status")
async def callback_menu_status(callback: CallbackQuery):
    """–°—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É"""
    await show_status(callback.message, callback)


async def show_status(message: Message, callback: CallbackQuery = None):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    monitor = get_monitor_from_context()
    db = JsonDatabase()
    settings = db.load_settings()
    recent_messages = db.get_recent_messages(1)
    
    monitoring_status = "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" if settings.get("monitoring_enabled", False) else "üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
    channels_count = len(MONITORED_CHANNELS)
    keywords_count = len(settings.get("keywords", []))
    total_messages = len(db.load_found_messages())
    
    last_message_time = "–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π"
    if recent_messages:
        last_message_time = recent_messages[-1].get('timestamp', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
    
    text = (
        f"üìä <b>–°—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞</b>\n\n"
        f"üî∏ –°—Ç–∞—Ç—É—Å: {monitoring_status}\n"
        f"üî∏ –ö–∞–Ω–∞–ª–æ–≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è: {channels_count}\n"
        f"üî∏ –ö–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: {keywords_count}\n"
        f"üî∏ –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {total_messages}\n"
        f"üî∏ –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {last_message_time}\n\n"
        f"üì∫ <b>–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –∫–∞–Ω–∞–ª—ã:</b>\n"
    )
    
    for channel_id, channel_name in MONITORED_CHANNELS.items():
        messages_from_channel = len(db.get_messages_by_channel(channel_id))
        text += f"‚Ä¢ {channel_name} ({messages_from_channel} —Å–æ–æ–±—â–µ–Ω–∏–π)\n"
    
    if callback:
        back_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data="menu_status"),
                InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="menu_settings")
            ],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu_refresh")]
        ])
        await callback.message.edit_text(text, reply_markup=back_keyboard, parse_mode="HTML")
        await callback.answer()
    else:
        await message.answer(text, parse_mode="HTML")


# ============ –ö–õ–Æ–ß–ï–í–´–ï –°–õ–û–í–ê ============

@router.message(Command("keywords"))
@admin_only
async def cmd_keywords(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /keywords"""
    await show_keywords(message)


@router.callback_query(F.data == "menu_keywords")
async def callback_menu_keywords(callback: CallbackQuery):
    """–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É"""
    await show_keywords(callback.message, callback)


async def show_keywords(message: Message, callback: CallbackQuery = None):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞"""
    db = JsonDatabase()
    settings = db.load_settings()
    current_keywords = settings.get("keywords", [])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞", callback_data="edit_keywords")],
        [
            InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="menu_keywords"),
            InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="keywords_stats")
        ],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu_refresh")]
    ])
    
    text = (
        f"üîë <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏</b>\n\n"
        f"<b>–¢–µ–∫—É—â–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:</b>\n"
        f"{'‚Ä¢ ' + chr(10).join(current_keywords) if current_keywords else '–ù–µ—Ç –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤'}\n\n"
        f"üìà –í—Å–µ–≥–æ: <b>{len(current_keywords)}</b> —Å–ª–æ–≤(–∞)\n\n"
        f"üí° <i>–ü–æ–∏—Å–∫ –≤–µ–¥–µ—Ç—Å—è –±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞</i>"
    )
    
    if callback:
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        await callback.answer()
    else:
        await message.answer(text, reply_markup=keyboard, parse_mode="HTML")


@router.callback_query(F.data == "edit_keywords")
async def callback_edit_keywords(callback: CallbackQuery, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤"""
    await callback.message.edit_text(
        "‚úèÔ∏è <b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:</b>\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>–∏—â—É, wordpress, freelance, —Ä–∞–±–æ—Ç–∞</code>\n\n"
        "üí° <i>–û—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã</i>",
        parse_mode="HTML"
    )
    await state.set_state(AdminStates.waiting_for_keywords)
    await callback.answer()


@router.message(StateFilter(AdminStates.waiting_for_keywords))
async def process_keywords_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤"""
    if message.text == "/cancel":
        await message.answer("‚ùå –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        await state.clear()
        return
    
    keywords_input = message.text.strip()
    
    if not keywords_input:
        await message.answer("‚ùå –ü—É—Å—Ç–æ–π –≤–≤–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    # –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ –∑–∞–ø—è—Ç—ã–º –∏ –æ—á–∏—â–∞–µ–º
    new_keywords = [kw.strip().lower() for kw in keywords_input.split(',') if kw.strip()]
    
    if not new_keywords:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
    monitor = get_monitor_from_context()
    db = JsonDatabase()
    settings = db.load_settings()
    settings["keywords"] = new_keywords
    db.save_settings(settings)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –º–æ–Ω–∏—Ç–æ—Ä–µ –µ—Å–ª–∏ –æ–Ω –¥–æ—Å—Ç—É–ø–µ–Ω
    if monitor:
        monitor.update_keywords(new_keywords)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ö –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º", callback_data="menu_keywords")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu_refresh")]
    ])
    
    await message.answer(
        f"‚úÖ <b>–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!</b>\n\n"
        f"üîë –ù–æ–≤—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:\n‚Ä¢ {chr(10).join(new_keywords)}",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    
    await state.clear()


@router.callback_query(F.data == "keywords_stats")
async def callback_keywords_stats(callback: CallbackQuery):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º"""
    db = JsonDatabase()
    all_messages = db.load_found_messages()
    
    keyword_stats = {}
    for msg in all_messages:
        keywords = msg.get('found_keywords', [])
        for kw in keywords:
            keyword_stats[kw] = keyword_stats.get(kw, 0) + 1
    
    text = "üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º</b>\n\n"
    
    if keyword_stats:
        text += "üîë <b>–ü–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å —Å–ª–æ–≤:</b>\n"
        for keyword, count in sorted(keyword_stats.items(), key=lambda x: x[1], reverse=True):
            text += f"‚Ä¢ <b>{keyword}</b>: {count} —É–ø–æ–º–∏–Ω–∞–Ω–∏–π\n"
    else:
        text += "üì≠ –ü–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º"
    
    back_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ö –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º", callback_data="menu_keywords")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu_refresh")]
    ])
    
    await callback.message.edit_text(text, reply_markup=back_keyboard, parse_mode="HTML")
    await callback.answer()


# ============ –ö–ê–ù–ê–õ–´ ============

@router.message(Command("channels"))
@admin_only
async def cmd_channels(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /channels"""
    await show_channels(message)


@router.callback_query(F.data == "menu_channels")
async def callback_menu_channels(callback: CallbackQuery):
    """–ö–∞–Ω–∞–ª—ã —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É"""
    await show_channels(callback.message, callback)


async def show_channels(message: Message, callback: CallbackQuery = None):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞–Ω–∞–ª—ã"""
    db = JsonDatabase()
    
    text = "üì∫ <b>–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –∫–∞–Ω–∞–ª—ã</b>\n\n"
    
    for channel_id, channel_name in MONITORED_CHANNELS.items():
        messages_count = len(db.get_messages_by_channel(channel_id))
        text += f"üî∏ <b>{channel_name}</b>\n"
        text += f"   ID: <code>{channel_id}</code>\n"
        text += f"   –ù–∞–π–¥–µ–Ω–æ: {messages_count} —Å–æ–æ–±—â–µ–Ω–∏–π\n\n"
    
    text += f"üìä –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: <b>{len(MONITORED_CHANNELS)}</b>"
    
    if callback:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="menu_channels"),
                InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="channels_stats")
            ],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu_refresh")]
        ])
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        await callback.answer()
    else:
        await message.answer(text, parse_mode="HTML")


@router.callback_query(F.data == "channels_stats")
async def callback_channels_stats(callback: CallbackQuery):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞–Ω–∞–ª–∞–º"""
    db = JsonDatabase()
    all_messages = db.load_found_messages()
    
    channel_stats = {}
    for msg in all_messages:
        channel_name = msg.get('channel_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª')
        channel_stats[channel_name] = channel_stats.get(channel_name, 0) + 1
    
    text = "üìä <b>–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞–Ω–∞–ª–∞–º</b>\n\n"
    
    if channel_stats:
        total_messages = sum(channel_stats.values())
        text += f"üìà –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: <b>{total_messages}</b>\n\n"
        
        for channel, count in sorted(channel_stats.items(), key=lambda x: x[1], reverse=True):
            percentage = (count / total_messages) * 100 if total_messages > 0 else 0
            text += f"üî∏ <b>{channel}</b>\n"
            text += f"   –°–æ–æ–±—â–µ–Ω–∏–π: {count} ({percentage:.1f}%)\n\n"
    else:
        text += "üì≠ –ü–æ–∫–∞ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"
    
    back_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ö –∫–∞–Ω–∞–ª–∞–º", callback_data="menu_channels")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu_refresh")]
    ])
    
    await callback.message.edit_text(text, reply_markup=back_keyboard, parse_mode="HTML")
    await callback.answer()


# ============ –ü–û–°–õ–ï–î–ù–ò–ï –°–û–û–ë–©–ï–ù–ò–Ø ============

@router.message(Command("recent"))
@admin_only
async def cmd_recent(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /recent"""
    # –ü–∞—Ä—Å–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑ –∫–æ–º–∞–Ω–¥—ã
    args = message.text.split()
    limit = 5  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    if len(args) > 1:
        try:
            limit = int(args[1])
            limit = min(max(limit, 1), 20)  # –æ—Ç 1 –¥–æ 20
        except ValueError:
            pass
    
    await show_recent_messages(message, limit)


@router.callback_query(F.data == "menu_recent")
async def callback_menu_recent(callback: CallbackQuery):
    """–í—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üì® 5 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö", callback_data="recent_5"),
            InlineKeyboardButton(text="üì® 10 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö", callback_data="recent_10")
        ],
        [
            InlineKeyboardButton(text="üì® 20 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö", callback_data="recent_20"),
            InlineKeyboardButton(text="üì® –í—Å–µ —Å–µ–≥–æ–¥–Ω—è", callback_data="recent_today")
        ],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu_refresh")]
    ])
    
    text = (
        "üì® <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:"
    )
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()


@router.callback_query(F.data.startswith("recent_"))
async def callback_show_recent(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    data = callback.data.split("_")[1]
    
    if data == "today":
        # –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        from datetime import datetime, date
        db = JsonDatabase()
        all_messages = db.load_found_messages()
        today = date.today().isoformat()
        recent_messages = [msg for msg in all_messages if msg.get('timestamp', '').startswith(today)]
        limit_text = "–∑–∞ —Å–µ–≥–æ–¥–Ω—è"
    else:
        limit = int(data)
        db = JsonDatabase()
        recent_messages = db.get_recent_messages(limit)
        limit_text = f"{limit} –ø–æ—Å–ª–µ–¥–Ω–∏—Ö"
    
    await show_recent_messages(callback.message, recent_messages, limit_text, callback)


async def show_recent_messages(message: Message, limit_or_messages, limit_text: str = None, callback: CallbackQuery = None):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    if isinstance(limit_or_messages, int):
        db = JsonDatabase()
        recent_messages = db.get_recent_messages(limit_or_messages)
        limit_text = f"{limit_or_messages} –ø–æ—Å–ª–µ–¥–Ω–∏—Ö"
    else:
        recent_messages = limit_or_messages
    
    if not recent_messages:
        text = f"üì≠ <b>–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π {limit_text if limit_text else ''}</b>"
    else:
        text = f"üì® <b>{len(recent_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π {limit_text if limit_text else ''}:</b>\n\n"
        
        for i, msg in enumerate(recent_messages, 1):
            channel_name = msg.get('channel_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª')
            keywords = ', '.join(msg.get('found_keywords', []))
            message_text = msg.get('text', '')[:150] + '...' if len(msg.get('text', '')) > 150 else msg.get('text', '')
            timestamp = msg.get('timestamp', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            
            text += (
                f"<b>{i}. {channel_name}</b>\n"
                f"üîë <i>{keywords}</i>\n"
                f"üìÖ {timestamp}\n"
                f"üí¨ {message_text}\n"
                f"{'‚îÄ' * 25}\n\n"
            )
    
    if callback:
        back_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=callback.data),
                InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="menu_recent")
            ],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu_refresh")]
        ])
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if len(text) > 4096:
            parts = [text[i:i+4000] for i in range(0, len(text), 4000)]
            for i, part in enumerate(parts):
                if i == len(parts) - 1:  # –ü–æ—Å–ª–µ–¥–Ω—è—è —á–∞—Å—Ç—å
                    await callback.message.edit_text(part, reply_markup=back_keyboard, parse_mode="HTML")
                else:
                    await callback.message.answer(part, parse_mode="HTML")
        else:
            await callback.message.edit_text(text, reply_markup=back_keyboard, parse_mode="HTML")
        await callback.answer()
    else:
        # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–±—ã—á–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã
        if len(text) > 4096:
            parts = [text[i:i+4096] for i in range(0, len(text), 4096)]
            for part in parts:
                await message.answer(part, parse_mode="HTML")
        else:
            await message.answer(text, parse_mode="HTML")


# ============ –ù–ê–°–¢–†–û–ô–ö–ò ============

@router.message(Command("settings"))
@admin_only
async def cmd_settings(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /settings"""
    await show_settings(message)


@router.callback_query(F.data == "menu_settings")
async def callback_menu_settings(callback: CallbackQuery):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É"""
    await show_settings(callback.message, callback)


async def show_settings(message: Message, callback: CallbackQuery = None):
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    db = JsonDatabase()
    settings = db.load_settings()
    
    monitoring_status = "üü¢ –í–∫–ª—é—á–µ–Ω" if settings.get("monitoring_enabled", False) else "üî¥ –í—ã–∫–ª—é—á–µ–Ω"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", 
            callback_data="toggle_monitoring"
        )],
        [
            InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="show_stats"),
            InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="menu_settings")
        ],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu_refresh")]
    ])
    
    text = (
        f"‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞</b>\n\n"
        f"üî∏ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: {monitoring_status}\n"
        f"üî∏ –ö–∞–Ω–∞–ª–æ–≤: {len(MONITORED_CHANNELS)}\n"
        f"üî∏ –ö–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: {len(settings.get('keywords', []))}\n"
        f"üî∏ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {settings.get('last_update', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n\n"
        f"üí° <i>–£–ø—Ä–∞–≤–ª—è–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ</i>"
    )
    
    if callback:
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        await callback.answer()
    else:
        await message.answer(text, reply_markup=keyboard, parse_mode="HTML")


@router.callback_query(F.data == "toggle_monitoring")
async def callback_toggle_monitoring(callback: CallbackQuery):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    db = JsonDatabase()
    settings = db.load_settings()
    
    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç—É—Å
    current_status = settings.get("monitoring_enabled", False)
    settings["monitoring_enabled"] = not current_status
    db.save_settings(settings)
    
    new_status = "üü¢ –í–∫–ª—é—á–µ–Ω" if settings["monitoring_enabled"] else "üî¥ –í—ã–∫–ª—é—á–µ–Ω"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", 
            callback_data="toggle_monitoring"
        )],
        [
            InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="show_stats"),
            InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="menu_settings")
        ],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu_refresh")]
    ])
    
    text = (
        f"‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞</b>\n\n"
        f"üî∏ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: {new_status}\n"
        f"üî∏ –ö–∞–Ω–∞–ª–æ–≤: {len(MONITORED_CHANNELS)}\n"
        f"üî∏ –ö–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: {len(settings.get('keywords', []))}\n"
        f"üî∏ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {settings.get('last_update', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n\n"
        f"üí° <i>–£–ø—Ä–∞–≤–ª—è–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ</i>"
    )
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer(f"–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ {'–≤–∫–ª—é—á–µ–Ω' if settings['monitoring_enabled'] else '–≤—ã–∫–ª—é—á–µ–Ω'}!")


@router.callback_query(F.data == "show_stats")
async def callback_show_stats(callback: CallbackQuery):
    """–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
    db = JsonDatabase()
    all_messages = db.load_found_messages()
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞–Ω–∞–ª–∞–º –∏ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
    channel_stats = {}
    keyword_stats = {}
    
    for msg in all_messages:
        channel_name = msg.get('channel_name', f'Channel {msg.get("channel_id", "Unknown")}')
        keywords = msg.get('found_keywords', [])
        
        channel_stats[channel_name] = channel_stats.get(channel_name, 0) + 1
        
        for kw in keywords:
            keyword_stats[kw] = keyword_stats.get(kw, 0) + 1
    
    text = "üìä <b>–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
    
    text += "üì∫ <b>–ü–æ –∫–∞–Ω–∞–ª–∞–º:</b>\n"
    for channel, count in sorted(channel_stats.items(), key=lambda x: x[1], reverse=True):
        text += f"‚Ä¢ {channel}: {count} —Å–æ–æ–±—â–µ–Ω–∏–π\n"
    
    text += f"\nüîë <b>–ü–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º:</b>\n"
    for keyword, count in sorted(keyword_stats.items(), key=lambda x: x[1], reverse=True):
        text += f"‚Ä¢ {keyword}: {count} —É–ø–æ–º–∏–Ω–∞–Ω–∏–π\n"
    
    back_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="menu_settings")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu_refresh")]
    ])
    
    await callback.message.edit_text(text, reply_markup=back_keyboard, parse_mode="HTML")
    await callback.answer()


# ============ –û–ß–ò–°–¢–ö–ê –ë–ê–ó–´ ============

@router.message(Command("clear"))
@admin_only
async def cmd_clear(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /clear"""
    await show_clear_confirm(message)


@router.callback_query(F.data == "menu_clear")
async def callback_menu_clear(callback: CallbackQuery):
    """–û—á–∏—Å—Ç–∫–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É"""
    await show_clear_confirm(callback.message, callback)


async def show_clear_confirm(message: Message, callback: CallbackQuery = None):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –î–∞, –æ—á–∏—Å—Ç–∏—Ç—å", callback_data="confirm_clear"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="menu_refresh")
        ]
    ])
    
    db = JsonDatabase()
    total_messages = len(db.load_found_messages())
    
    text = (
        f"‚ö†Ô∏è <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏</b>\n\n"
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è?\n\n"
        f"üìä –ë—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã: <b>{total_messages}</b> —Å–æ–æ–±—â–µ–Ω–∏–π\n\n"
        f"<i>‚ö†Ô∏è –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!</i>"
    )
    
    if callback:
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        await callback.answer()
    else:
        await message.answer(text, reply_markup=keyboard, parse_mode="HTML")


@router.callback_query(F.data == "confirm_clear")
async def callback_confirm_clear(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏"""
    db = JsonDatabase()
    db.clear_messages()
    
    await callback.message.edit_text(
        "‚úÖ <b>–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞!</b>\n\n"
        "–í—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã.",
        parse_mode="HTML"
    )
    await callback.answer("–ë–∞–∑–∞ –æ—á–∏—â–µ–Ω–∞!")


# ============ –°–ü–†–ê–í–ö–ê ============

@router.message(Command("help"))
@admin_only
async def cmd_help(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /help"""
    await show_help(message)


@router.callback_query(F.data == "menu_help")
async def callback_menu_help(callback: CallbackQuery):
    """–°–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É"""
    await show_help(callback.message, callback)


async def show_help(message: Message, callback: CallbackQuery = None):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üìä –ö–æ–º–∞–Ω–¥—ã", callback_data="help_commands"),
            InlineKeyboardButton(text="üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞", callback_data="help_setup")
        ],
        [
            InlineKeyboardButton(text="‚ùì FAQ", callback_data="help_faq"),
            InlineKeyboardButton(text="üêõ –ü—Ä–æ–±–ª–µ–º—ã", callback_data="help_troubleshooting")
        ],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu_refresh")]
    ])
    
    text = (
        "üìñ <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ Stalker Bot</b>\n\n"
        "ü§ñ <b>–ß—Ç–æ –¥–µ–ª–∞–µ—Ç –±–æ—Ç:</b>\n"
        "‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç 6 Telegram –∫–∞–Ω–∞–ª–æ–≤\n"
        "‚Ä¢ –ò—â–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏\n"
        "‚Ä¢ –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—Ö–æ–¥–∫–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö\n"
        "‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏\n\n"
        "üëá <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª —Å–ø—Ä–∞–≤–∫–∏:</b>"
    )
    
    if callback:
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        await callback.answer()
    else:
        await message.answer(text, reply_markup=keyboard, parse_mode="HTML")


@router.callback_query(F.data == "help_commands")
async def callback_help_commands(callback: CallbackQuery):
    """–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"""
    text = (
        "üìã <b>–í—Å–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞</b>\n\n"
        "üè† <b>–û—Å–Ω–æ–≤–Ω—ã–µ:</b>\n"
        "‚Ä¢ /start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "‚Ä¢ /help - –°–ø—Ä–∞–≤–∫–∞\n\n"
        "üìä <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:</b>\n"
        "‚Ä¢ /status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã\n"
        "‚Ä¢ /keywords - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏\n"
        "‚Ä¢ /channels - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–Ω–∞–ª–∞—Ö\n"
        "‚Ä¢ /recent [N] - –ü–æ—Å–ª–µ–¥–Ω–∏–µ N —Å–æ–æ–±—â–µ–Ω–∏–π\n\n"
        "‚öôÔ∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b>\n"
        "‚Ä¢ /settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞\n"
        "‚Ä¢ /clear - –û—á–∏—Å—Ç–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö\n\n"
        "üí° <i>–í—Å–µ –∫–æ–º–∞–Ω–¥—ã —Ç–∞–∫–∂–µ –¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é!</i>"
    )
    
    back_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ö —Å–ø—Ä–∞–≤–∫–µ", callback_data="menu_help")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu_refresh")]
    ])
    
    await callback.message.edit_text(text, reply_markup=back_keyboard, parse_mode="HTML")
    await callback.answer()


@router.callback_query(F.data == "help_setup")
async def callback_help_setup(callback: CallbackQuery):
    """–°–ø—Ä–∞–≤–∫–∞ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ"""
    text = (
        "üîß <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Stalker Bot</b>\n\n"
        f"üìù <b>–§–∞–π–ª .env –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å:</b>\n"
        f"‚Ä¢ API_ID - ID Telegram API\n"
        f"‚Ä¢ API_HASH - —Ö–µ—à Telegram API\n"
        f"‚Ä¢ PHONE - –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n"
        f"‚Ä¢ BOT_TOKEN - —Ç–æ–∫–µ–Ω –±–æ—Ç–∞\n"
        f"‚Ä¢ ADMIN_ID - –≤–∞—à ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n"
        f"üîó <b>–ì–¥–µ –ø–æ–ª—É—á–∏—Ç—å:</b>\n"
        f"‚Ä¢ API: https://my.telegram.org/\n"
        f"‚Ä¢ Bot Token: @BotFather\n"
        f"‚Ä¢ User ID: @userinfobot\n\n"
        f"‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b>\n"
        f"‚Ä¢ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–∞–Ω–∞–ª–∞—Ö\n"
        f"‚Ä¢ –ü—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ –Ω—É–∂–µ–Ω –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"
    )
    
    back_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ö —Å–ø—Ä–∞–≤–∫–µ", callback_data="menu_help")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu_refresh")]
    ])
    
    await callback.message.edit_text(text, reply_markup=back_keyboard, parse_mode="HTML")
    await callback.answer()


@router.callback_query(F.data == "help_faq")
async def callback_help_faq(callback: CallbackQuery):
    """FAQ"""
    text = (
        "‚ùì <b>–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã</b>\n\n"
        "‚ùì <b>–ë–æ—Ç –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏—è?</b>\n"
        "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω –∫ –∫–∞–Ω–∞–ª–∞–º\n"
        "‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤–∫–ª—é—á–µ–Ω\n"
        "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤\n\n"
        "‚ùì <b>–ë–æ—Ç –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è?</b>\n"
        "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ BOT_TOKEN –∏ ADMIN_ID\n"
        "‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç –∑–∞–ø—É—â–µ–Ω\n\n"
        "‚ùì <b>–ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞?</b>\n"
        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é '–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞'\n"
        "‚Ä¢ –í–≤–æ–¥–∏—Ç–µ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é\n\n"
        "‚ùì <b>–°–∫–æ–ª—å–∫–æ –∫–∞–Ω–∞–ª–æ–≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è?</b>\n"
        "‚Ä¢ –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç: 6 –∫–∞–Ω–∞–ª–æ–≤\n"
        "‚Ä¢ –°–ø–∏—Å–æ–∫ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ '–ö–∞–Ω–∞–ª—ã'"
    )
    
    back_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ö —Å–ø—Ä–∞–≤–∫–µ", callback_data="menu_help")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu_refresh")]
    ])
    
    await callback.message.edit_text(text, reply_markup=back_keyboard, parse_mode="HTML")
    await callback.answer()


@router.callback_query(F.data == "help_troubleshooting")
async def callback_help_troubleshooting(callback: CallbackQuery):
    """–†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º"""
    text = (
        "üêõ <b>–†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º</b>\n\n"
        "üî¥ <b>–û—à–∏–±–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:</b>\n"
        "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API_ID, API_HASH, PHONE\n"
        "‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n"
        "‚Ä¢ –ü—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ SMS\n\n"
        "üî¥ <b>–ö–∞–Ω–∞–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:</b>\n"
        "‚Ä¢ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å –∫ –∫–∞–Ω–∞–ª—É –≤—Ä—É—á–Ω—É—é\n"
        "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ID –∫–∞–Ω–∞–ª–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö\n\n"
        "üî¥ <b>–ë–æ—Ç –Ω–µ —Ä–µ–∞–≥–∏—Ä—É–µ—Ç:</b>\n"
        "‚Ä¢ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n"
        "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤ stalker_bot.log\n"
        "‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ ADMIN_ID\n\n"
        "üìû <b>–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –Ω–µ —Ä–µ—à–µ–Ω–∞:</b>\n"
        "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª stalker_bot.log\n"
        "‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
    )
    
    back_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ö —Å–ø—Ä–∞–≤–∫–µ", callback_data="menu_help")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu_refresh")]
    ])
    
    await callback.message.edit_text(text, reply_markup=back_keyboard, parse_mode="HTML")
    await callback.answer()
