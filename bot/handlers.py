"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è —É–ø—Ä–∞–≤–ª—è—é—â–µ–≥–æ –±–æ—Ç–∞ - –û–ß–ò–©–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –ë–ï–ó GMAIL
"""
import logging
import inspect
import os
import html
import math
from datetime import datetime, timedelta
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.exceptions import TelegramBadRequest

from config import get_admin_list, is_admin, is_super_admin, SUPER_ADMIN_ID, get_monitored_channels
from database import JsonDatabase
from .globals import get_monitor_instance

logger = logging.getLogger(__name__)
router = Router()

# –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
MONITORED_CHANNELS = get_monitored_channels()

class AdminStates(StatesGroup):
    waiting_for_keywords = State()
    waiting_for_channel_id = State()
    waiting_for_channel_name = State()
    waiting_for_remove_channel_id = State()
    waiting_for_new_admin_id = State()
    waiting_for_remove_admin_id = State()
    waiting_for_message_search = State()

def admin_only(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    async def wrapper(message: Message, *args, **kwargs):
        if not is_admin(message.from_user.id):
            await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
            return
        
        sig = inspect.signature(func)
        filtered_kwargs = {}
        for param_name in sig.parameters:
            if param_name in kwargs:
                filtered_kwargs[param_name] = kwargs[param_name]
        
        return await func(message, *args, **filtered_kwargs)
    return wrapper

def super_admin_only(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    async def wrapper(message: Message, *args, **kwargs):
        if not is_super_admin(message.from_user.id):
            await message.answer("‚õî –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—é –±–æ—Ç–∞")
            return
        
        sig = inspect.signature(func)
        filtered_kwargs = {}
        for param_name in sig.parameters:
            if param_name in kwargs:
                filtered_kwargs[param_name] = kwargs[param_name]
        
        return await func(message, *args, **filtered_kwargs)
    return wrapper

def format_moscow_time(time_data):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ"""
    if not time_data:
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    
    if isinstance(time_data, dict):
        moscow_time_str = time_data.get('moscow_time')
        if moscow_time_str:
            try:
                moscow_dt = datetime.fromisoformat(moscow_time_str)
                return moscow_dt.strftime("%d.%m.%Y %H:%M:%S MSK")
            except:
                pass
        
        timestamp = time_data.get('timestamp')
        if timestamp:
            try:
                dt = datetime.fromisoformat(timestamp)
                moscow_dt = dt.replace(tzinfo=None) + timedelta(hours=2)
                return moscow_dt.strftime("%d.%m.%Y %H:%M:%S MSK")
            except:
                pass
    
    if isinstance(time_data, str):
        try:
            dt = datetime.fromisoformat(time_data)
            moscow_dt = dt.replace(tzinfo=None) + timedelta(hours=2)
            return moscow_dt.strftime("%d.%m.%Y %H:%M:%S MSK")
        except:
            return time_data
    
    return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

def format_sender_info(msg_data):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ"""
    sender_full_name = msg_data.get('sender_full_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')
    sender_username = msg_data.get('sender_username', '')
    
    if sender_username and sender_username != sender_full_name:
        return f"{sender_full_name} ({sender_username})"
    return sender_full_name

def escape_html(text):
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç HTML —Å–∏–º–≤–æ–ª—ã –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Telegram"""
    if not text:
        return ""
    return html.escape(str(text))

def get_main_menu(user_id: int = None):
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton(text="üì∫ –ö–∞–Ω–∞–ª—ã"),
                KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
            ],
            [
                KeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å")
            ]
        ],
        resize_keyboard=True,
        one_time_keyboard=False,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª..."
    )
    return keyboard

def get_channels_menu(user_id: int = None):
    """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é —Ä–∞–∑–¥–µ–ª–∞ –∫–∞–Ω–∞–ª–æ–≤"""
    keyboard_rows = []
    
    keyboard_rows.append([
        KeyboardButton(text="üìä –°—Ç–∞—Ç—É—Å –∫–∞–Ω–∞–ª–æ–≤"),
        KeyboardButton(text="üîç –ü–æ–∏—Å–∫ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö")
    ])
    
    keyboard_rows.append([
        KeyboardButton(text="üìù –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞"),
        KeyboardButton(text="üì® –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
    ])
    
    keyboard_rows.append([
        KeyboardButton(text="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–Ω–∞–ª–æ–≤"),
        KeyboardButton(text="üì∫ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏")
    ])
    
    if user_id and is_admin(user_id):
        keyboard_rows.append([
            KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª"),
            KeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª")
        ])
    
    keyboard_rows.append([
        KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    ])
    
    keyboard = ReplyKeyboardMarkup(
        keyboard=keyboard_rows,
        resize_keyboard=True,
        one_time_keyboard=False
    )
    return keyboard

def get_settings_menu(user_id: int = None):
    """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    keyboard_rows = []
    
    keyboard_rows.append([
        KeyboardButton(text="üìù –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞"),
        KeyboardButton(text="üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã")
    ])
    
    if user_id and is_admin(user_id):
        keyboard_rows.append([
            KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª"),
            KeyboardButton(text="üßπ –û—á–∏—Å—Ç–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è")
        ])
    
    if user_id and is_super_admin(user_id):
        keyboard_rows.append([
            KeyboardButton(text="üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏")
        ])
    
    keyboard_rows.append([
        KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    ])
    
    keyboard = ReplyKeyboardMarkup(
        keyboard=keyboard_rows,
        resize_keyboard=True,
        one_time_keyboard=False
    )
    return keyboard

def get_back_menu():
    """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞"""
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )
    return keyboard

async def safe_callback_answer(callback: CallbackQuery, text: str = "OK"):
    """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ callback query —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
    try:
        await callback.answer(text)
    except TelegramBadRequest as e:
        error_message = str(e).lower()
        if "query is too old" in error_message or "query id is invalid" in error_message:
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Å—Ç–∞—Ä—ã—Ö callback queries
            logger.debug(f"–ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–π callback query: {e}")
            pass
        else:
            # –õ–æ–≥–∏—Ä—É–µ–º –¥—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏
            logger.error(f"–û—à–∏–±–∫–∞ callback.answer(): {e}")
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ callback.answer(): {e}")

async def safe_edit_message(callback: CallbackQuery, text: str, reply_markup=None, parse_mode="HTML"):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Å—Ç–∞—Ä—ã—Ö queries"""
    try:
        if reply_markup is not None:
            await callback.message.edit_text(text, reply_markup=reply_markup, parse_mode=parse_mode)
        else:
            await callback.message.edit_text(text, parse_mode=parse_mode)
        await safe_callback_answer(callback)
    except TelegramBadRequest as e:
        error_message = str(e).lower()
        if "message is not modified" in error_message:
            await safe_callback_answer(callback, "‚úÖ –î–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã!")
        elif "query is too old" in error_message or "query id is invalid" in error_message:
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            try:
                await callback.message.answer(text, reply_markup=reply_markup, parse_mode=parse_mode)
            except Exception as send_error:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {send_error}")
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await safe_callback_answer(callback, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏")
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await safe_callback_answer(callback, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

def get_monitor_from_context():
    """–ü–æ–ª—É—á–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
    return get_monitor_instance()

# ============ –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ ============

@router.message(Command("start"))
@admin_only
async def cmd_start(message: Message, state: FSMContext = None):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ª—é–±–æ–µ –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    if state:
        await state.clear()
    
    db = JsonDatabase()
    
    inline_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="menu_refresh"),
            InlineKeyboardButton(text="üìä –°—Ç–∞—Ç—É—Å", callback_data="menu_status")
        ]
    ])
    
    text = (
        "üéØ <b>Stalker Bot</b> - –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–∞–Ω–∞–ª–æ–≤\n\n"
        "üöÄ <b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞:</b>\n"
        "‚Ä¢ üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞–Ω–∞–ª–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏\n"
        "‚Ä¢ üéØ –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º\n"
        "‚Ä¢ üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤\n"
        "‚Ä¢ üîî –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n"
        "‚Ä¢ üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n"
        "üëá <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é:</b>"
    )
    
    await message.answer(
        text, 
        reply_markup=get_main_menu(message.from_user.id), 
        parse_mode="HTML"
    )
    await message.answer(
        "‚ö° <i>–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:</i>",
        reply_markup=inline_keyboard,
        parse_mode="HTML"
    )

@router.message(Command("cancel"))
@admin_only
async def cmd_cancel(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cancel –¥–ª—è —Å–±—Ä–æ—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
    await state.clear()
    await message.answer(
        "‚ùå <b>–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞</b>\n\n"
        "–í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è —Å–±—Ä–æ—à–µ–Ω—ã.",
        parse_mode="HTML",
        reply_markup=get_main_menu(message.from_user.id)
    )

# ============ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–ù–û–ü–û–ö ============

@router.message(F.text == "üì∫ –ö–∞–Ω–∞–ª—ã")
@admin_only
async def menu_channels_section_button(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Ä–∞–∑–¥–µ–ª–∞ –ö–∞–Ω–∞–ª—ã"""
    await message.answer(
        "üì∫ <b>–†–∞–∑–¥–µ–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞–º–∏</b>\n\n"
        "üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Telegram –∫–∞–Ω–∞–ª–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏\n"
        "üéØ –ü–æ–∏—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º\n\n"
        "üëá –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode="HTML",
        reply_markup=get_channels_menu(message.from_user.id)
    )

@router.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
@admin_only
async def menu_settings_section_button(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Ä–∞–∑–¥–µ–ª–∞ –ù–∞—Å—Ç—Ä–æ–π–∫–∏"""
    await message.answer(
        "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã</b>\n\n"
        "üéõÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫:",
        parse_mode="HTML",
        reply_markup=get_settings_menu(message.from_user.id)
    )

@router.message(F.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
@admin_only
async def menu_help_button(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ü–æ–º–æ—â—å"""
    await show_help(message)

@router.message(F.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
@admin_only
async def menu_home_button(message: Message, state: FSMContext = None):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ª—é–±–æ–µ –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    if state:
        await state.clear()
    await cmd_start(message, state)

# ============ –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–ù–û–ü–û–ö –ö–ê–ù–ê–õ–û–í ============

@router.message(F.text == "üìä –°—Ç–∞—Ç—É—Å –∫–∞–Ω–∞–ª–æ–≤")
@admin_only
async def menu_channels_status_button(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –°—Ç–∞—Ç—É—Å –∫–∞–Ω–∞–ª–æ–≤"""
    await show_channels_status(message)

@router.message(F.text == "üîç –ü–æ–∏—Å–∫ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö")
@admin_only
async def menu_search_messages_button(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ü–æ–∏—Å–∫ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö"""
    await state.set_state(AdminStates.waiting_for_message_search)
    await message.answer(
        "üîç <b>–ü–æ–∏—Å–∫ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –∫–∞–Ω–∞–ª–æ–≤</b>\n\n"
        "üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö:\n\n"
        "üí° <b>–ü—Ä–∏–º–µ—Ä—ã –ø–æ–∏—Å–∫–∞:</b>\n"
        "‚Ä¢ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞\n"
        "‚Ä¢ —Å–∫–∏–¥–∫–∞\n"
        "‚Ä¢ –Ω–æ–≤–æ—Å—Ç–∏\n\n"
        "üîé –ü–æ–∏—Å–∫ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π\n\n"
        "‚ùå –î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel",
        parse_mode="HTML",
        reply_markup=get_back_menu()
    )

@router.message(F.text == "üìù –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞")
@admin_only
async def menu_keywords_button(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞"""
    db = JsonDatabase()
    settings = db.load_settings()
    current_keywords = settings.get("keywords", [])
    
    text = (
        f"üîë <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏</b>\n\n"
        f"<b>–¢–µ–∫—É—â–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:</b>\n"
        f"{'‚Ä¢ ' + chr(10).join(current_keywords) if current_keywords else '–ù–µ—Ç –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤'}\n\n"
        f"üìà –í—Å–µ–≥–æ: <b>{len(current_keywords)}</b> —Å–ª–æ–≤(–∞)\n\n"
        f"üí° <i>–ü–æ–∏—Å–∫ –≤–µ–¥–µ—Ç—Å—è –±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞</i>\n\n"
    )
    
    # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å–ª–æ–≤–∞", callback_data="keywords_edit"),
            InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫", callback_data="keywords_refresh")
        ]
    ])
    
    await message.answer(text, parse_mode="HTML", reply_markup=keyboard)

@router.message(F.text == "üì® –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
@admin_only
async def menu_found_messages_button(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    await show_recent_messages(message, 50, 1)

@router.message(F.text == "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–Ω–∞–ª–æ–≤")
@admin_only
async def menu_channels_stats_button(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–Ω–∞–ª–æ–≤"""
    await show_channels_stats(message)

@router.message(F.text == "üì∫ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏")
@admin_only
async def menu_channel_management_button(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞–º–∏"""
    await show_channels(message)

@router.message(F.text == "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏")
@super_admin_only
async def menu_admin_management_button(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏"""
    await show_admin_management(message)

# ============ –§–£–ù–ö–¶–ò–ò –ü–†–û–°–ú–û–¢–†–ê –î–ê–ù–ù–´–• ============

async def show_channels_status(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∫–∞–Ω–∞–ª–æ–≤"""
    monitor = get_monitor_from_context()
    db = JsonDatabase()
    settings = db.load_settings()
    channels = db.get_channels()
    
    monitoring_status = "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" if settings.get("monitoring_enabled", False) else "üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
    channels_count = len(channels)
    keywords_count = len(settings.get("keywords", []))
    total_messages = len(db.load_found_messages())
    
    text = (
        f"üìä <b>–°—Ç–∞—Ç—É—Å –∫–∞–Ω–∞–ª–æ–≤</b>\n"
        f"{'‚ïê' * 30}\n\n"
        f"üî∏ <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:</b> {monitoring_status}\n"
        f"üî∏ <b>–ö–∞–Ω–∞–ª–æ–≤:</b> {channels_count}\n"
        f"üî∏ <b>–ö–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤:</b> {keywords_count}\n"
        f"üî∏ <b>–ù–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π:</b> {total_messages}\n\n"
    )
    
    if channels:
        text += "üì∫ <b>–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –∫–∞–Ω–∞–ª—ã:</b>\n\n"
        for str_channel_id, channel_name in channels.items():
            channel_id = int(str_channel_id)
            messages_from_channel = len(db.get_messages_by_channel(channel_id))
            text += f"üìå <b>{channel_name}</b> ‚Äî {messages_from_channel} —Å–æ–æ–±—â–µ–Ω–∏–π\n"
    else:
        text += "‚ùå <i>–ö–∞–Ω–∞–ª—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã</i>\n"
    
    text += f"\n{'‚ïê' * 30}"
    
    await message.answer(text, parse_mode="HTML", reply_markup=get_back_menu())

async def show_recent_messages(message: Message, limit: int = 50, page: int = 1):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    db = JsonDatabase()
    recent_messages = db.get_recent_messages(limit)
    
    if not recent_messages:
        text = f"üì≠ <b>–ù–µ—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π</b>\n\n–°–æ–æ–±—â–µ–Ω–∏—è –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å –ø–æ—Å–ª–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º."
        await message.answer(text, parse_mode="HTML", reply_markup=get_back_menu())
        return
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    messages_per_page = 5
    total_messages = len(recent_messages)
    total_pages = math.ceil(total_messages / messages_per_page)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if page < 1:
        page = 1
    elif page > total_pages:
        page = total_pages
    
    # –í—ã—á–∏—Å–ª—è–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start_idx = (page - 1) * messages_per_page
    end_idx = min(start_idx + messages_per_page, total_messages)
    page_messages = recent_messages[start_idx:end_idx]
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    text = f"üì® <b>–ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è</b>\n"
    text += f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {total_pages} (–≤—Å–µ–≥–æ: {total_messages})\n\n"
    
    for i, msg in enumerate(page_messages, start_idx + 1):
        channel_name = msg.get('channel_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª')
        keywords = ', '.join(msg.get('found_keywords', []))
        message_text = msg.get('text', '')[:150] + '...' if len(msg.get('text', '')) > 150 else msg.get('text', '')
        
        moscow_time = format_moscow_time(msg)
        sender_info = format_sender_info(msg)
        
        text += (
            f"<b>{i}. {channel_name}</b>\n"
            f"üë§ {sender_info}\n"
            f"üîë <i>{keywords}</i>\n"
            f"üìÖ {moscow_time}\n"
            f"üí¨ {message_text}\n"
            f"{'‚îÄ' * 25}\n\n"
        )
    
    # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    keyboard_buttons = []
    
    if total_pages > 1:
        nav_buttons = []
        
        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" (–µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞)
        if page > 1:
            nav_buttons.append(InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", 
                callback_data=f"messages_page_{page-1}"
            ))
        
        # –ö–Ω–æ–ø–∫–∞ —Å –Ω–æ–º–µ—Ä–æ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        nav_buttons.append(InlineKeyboardButton(
            text=f"üìÑ {page}/{total_pages}",
            callback_data="messages_page_current"
        ))
        
        # –ö–Ω–æ–ø–∫–∞ "–í–ø–µ—Ä–µ–¥" (–µ—Å–ª–∏ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞)
        if page < total_pages:
            nav_buttons.append(InlineKeyboardButton(
                text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", 
                callback_data=f"messages_page_{page+1}"
            ))
        
        keyboard_buttons.append(nav_buttons)
    
    # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    keyboard_buttons.append([
        InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="messages_refresh")
    ])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    
    await message.answer(text, parse_mode="HTML", reply_markup=keyboard)

async def show_channels_stats(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–Ω–∞–ª–æ–≤"""
    db = JsonDatabase()
    all_messages = db.load_found_messages()
    
    if not all_messages:
        await message.answer(
            "üì≠ <b>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏</b>\n\n"
            "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—è–≤–∏—Ç—Å—è –ø–æ—Å–ª–µ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π.",
            parse_mode="HTML",
            reply_markup=get_back_menu()
        )
        return
    
    channel_stats = {}
    keyword_stats = {}
    
    for msg in all_messages:
        channel_name = msg.get('channel_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª')
        channel_stats[channel_name] = channel_stats.get(channel_name, 0) + 1
        
        keywords = msg.get('found_keywords', [])
        for kw in keywords:
            keyword_stats[kw] = keyword_stats.get(kw, 0) + 1
    
    text = "üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–Ω–∞–ª–æ–≤</b>\n\n"
    
    total_messages = sum(channel_stats.values())
    text += f"üìä –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: <b>{total_messages}</b>\n\n"
    
    text += "üì∫ <b>–ü–æ –∫–∞–Ω–∞–ª–∞–º:</b>\n"
    for channel, count in sorted(channel_stats.items(), key=lambda x: x[1], reverse=True):
        percentage = (count / total_messages) * 100 if total_messages > 0 else 0
        text += f"üî∏ <b>{channel}</b>: {count} ({percentage:.1f}%)\n"
    
    text += "\nüîë <b>–ü–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º:</b>\n"
    for keyword, count in sorted(keyword_stats.items(), key=lambda x: x[1], reverse=True)[:10]:
        text += f"‚Ä¢ <b>{keyword}</b>: {count} —É–ø–æ–º–∏–Ω–∞–Ω–∏–π\n"
    
    await message.answer(text, parse_mode="HTML", reply_markup=get_back_menu())

async def show_channels(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞–Ω–∞–ª—ã"""
    db = JsonDatabase()
    channels = db.get_channels()
    
    text = "üì∫ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏</b>\n\n"
    
    if channels:
        text += "üìã <b>–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –∫–∞–Ω–∞–ª—ã:</b>\n\n"
        for str_channel_id, channel_name in channels.items():
            channel_id = int(str_channel_id)
            messages_count = len(db.get_messages_by_channel(channel_id))
            text += f"üî∏ <b>{channel_name}</b>\n"
            text += f"   ID: <code>{channel_id}</code>\n"
            text += f"   –ù–∞–π–¥–µ–Ω–æ: {messages_count} —Å–æ–æ–±—â–µ–Ω–∏–π\n\n"
        
        text += f"üìä –í—Å–µ–≥–æ –∫–∞–Ω–∞–ª–æ–≤: <b>{len(channels)}</b>"
    else:
        text += "üì≠ <b>–ù–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤</b>\n\n"
        text += "–î–æ–±–∞–≤—å—Ç–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è –Ω–∞—á–∞–ª–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞."
    
    await message.answer(text, parse_mode="HTML", reply_markup=get_back_menu())

async def show_help(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"""
    text = (
        "üìñ <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ Stalker Bot</b>\n\n"
        "ü§ñ <b>–ß—Ç–æ –¥–µ–ª–∞–µ—Ç –±–æ—Ç:</b>\n"
        "‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç Telegram –∫–∞–Ω–∞–ª—ã\n"
        "‚Ä¢ –ò—â–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏\n"
        "‚Ä¢ –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—Ö–æ–¥–∫–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö\n"
        "‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏\n\n"
        "üì∫ <b>–†–∞–∑–¥–µ–ª –∫–∞–Ω–∞–ª–æ–≤:</b>\n"
        "‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤\n"
        "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π\n"
        "‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞–Ω–∞–ª–∞–º\n\n"
        "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n"
        "‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏\n"
        "‚Ä¢ –û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö\n"
        "‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏\n\n"
        "üí° <b>–°–æ–≤–µ—Ç:</b> –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏!"
    )
    
    await message.answer(text, parse_mode="HTML", reply_markup=get_back_menu())

# ============ –§–£–ù–ö–¶–ò–ò –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ö–ê–ù–ê–õ–ê–ú–ò ============

@router.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª")
@admin_only
async def menu_add_channel_button(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞"""
    await state.set_state(AdminStates.waiting_for_channel_id)
    text = (
        "‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞</b>\n\n"
        "üìù –í–≤–µ–¥–∏—Ç–µ ID –∫–∞–Ω–∞–ª–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:\n\n"
        "üí° <b>–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å ID –∫–∞–Ω–∞–ª–∞:</b>\n"
        "1. –ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞ –≤ @userinfobot\n"
        "2. –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ @getmyid_bot\n"
        "3. ID –∫–∞–Ω–∞–ª–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å -100\n\n"
        "üìå <b>–ü—Ä–∏–º–µ—Ä:</b> -1001234567890\n\n"
        "‚ùå –î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel"
    )
    await message.answer(text, parse_mode="HTML", reply_markup=get_back_menu())

@router.message(F.text == "‚ûñ –£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª")
@admin_only
async def menu_remove_channel_button(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞"""
    db = JsonDatabase()
    channels = db.get_channels()
    
    if not channels:
        await message.answer(
            "‚ùå <b>–ù–µ—Ç –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è</b>\n\n"
            "–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.",
            parse_mode="HTML",
            reply_markup=get_back_menu()
        )
        return
    
    await state.set_state(AdminStates.waiting_for_remove_channel_id)
    
    text = (
        "‚ûñ <b>–£–¥–∞–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞</b>\n\n"
        "üìù –í–≤–µ–¥–∏—Ç–µ ID –∫–∞–Ω–∞–ª–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n\n"
        "üì∫ <b>–¢–µ–∫—É—â–∏–µ –∫–∞–Ω–∞–ª—ã:</b>\n\n"
    )
    
    for channel_id, channel_name in channels.items():
        text += f"‚Ä¢ <b>{channel_name}</b>\n   ID: <code>{channel_id}</code>\n\n"
    
    text += "‚ùå –î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel"
    
    await message.answer(text, parse_mode="HTML", reply_markup=get_back_menu())

# ============ –û–°–¢–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –ò –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ============
# (–î–æ–±–∞–≤–ª—é –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑ Gmail...)

# –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π - –æ–Ω–∏ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö
